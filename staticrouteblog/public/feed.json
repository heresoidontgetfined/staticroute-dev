{
  "version": "https://jsonfeed.org/version/1",
  "title": "StaticRoute.Dev",
  "home_page_url": "http://localhost:1313/",
  "feed_url": "http://localhost:1313/feed.json",
  "description": "Blog and Portfolio",
  "favicon": "http://localhost:1313//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Mike Foreman",
    "url": "http://localhost:1313/"
  },
  "items": [
    
    

    
    {
      "id": "3e0fac9b0c99174ff6bc313ff355eb413c5f3f77",
      "title": "Claude Code Contest - What Can You Build in One Week: Bgp sandbox",
      "summary": "",
      "content_text": " This is my entry into a contest - building something cool in one week or less. I\u0026rsquo;ve wanted to explore the intersection of code and network engineering more so I geared this project toward BGP daemons.\n1: What I built: This project is an educational tool for Border Gateway Protocol. It helps users visualize BGP route advertisements between peers. It also allows the user to interact with the BGP process by: injecting routes into the BGP process and configuring import/export policies. Users can see how these policies and advertisements effect the Peer route tables in real time. It was important to me that the application use actual BGP routing instances that peer with each other.\nThe user interacts with a custom TUI build for this project (because TUIs are cool) and after selecting their run configuration a GUI is launched with the specified daemon start-states. The TUI was built using the BubbleTea framework (GO). The frontend is built using JS/React/Cytoscape and the backend is leveraging GoBGP.\n2. How I built it in a week or less: I started this project on the evening of Friday October 3rd, with an idea that I\u0026rsquo;d been kicking around for quite some time. I finished with a functional product that exceeded my expectations on the Sunday evening (10/5). My initial prompt:\nBuild an educational BGP sandbox app consisting of: TUI - Use: https://github.com/charmbracelet/bubbletea to create a TUI that launches the browser based frontend. -Colorful, with options to determine how many peers are included in the launch, whether they use iBGP or eBGP, etc.\nFrontend - Javascript: browser-based interactive UI. -Users see a small AS-level network w/nodes and edges. -Users can Toggle BGP neighborships on/off between AS nodes. -Inject prefixes from an AS. -Apply simple BGP policy knobs (local-pref, AS-path prepend, MED, community no-export).\nThe graph should update to show: -Best path selection (highlighted). -Alternate paths (dimmed). -Animated “packets” moving along the best path.\nReact + Cytoscape.js or D3. REST or websocket connection to backend.\nBackend - GoBGP: Run GoBGP inside a Docker container as the routing engine. -A lightweight Node.js/Express service runs alongside GoBGP in the same container or compose setup. -This service exposes REST or WebSocket endpoints that the frontend can call. Use GoBGP documentation to determine functions to expose, such as: POST /enable → enables a BGP session. POST /disable → tears down a session. POST /prefixes → inject a prefix into a given AS. POST /policy → apply simple policy knobs. GET /routes → returns the RIB for best path info for visualization. -The service internally uses GoBGP’s gRPC API to perform these actions. -Fully document the API\nContainerization - Docker:\nProvide a Dockerfile or docker-compose.yml that: -Runs GoBGP. -Runs the API service. -Exposes the frontend via a simple dev server (e.g., Vite/React).\n*This should be fully functional, no mock data. If you have questions about deployment protocols or methods feel free to ask me before deployment.\nSome additional prompts were used to:\nMake the TUI more decorative Change the configuration to ensure each \u0026ldquo;Peer\u0026rdquo; is in fact its own instance of GoBGP, rather than a single instance. Make sure the entire project can be spun up and down using docker. Add a clickable \u0026ldquo;packet\u0026rdquo; that looks like a condiment packet, which displays the NLRI being exchanged between Peers. Ensure import/export policies are being properly applied and can be both created and deleted by the user. 3. Screenshots/Demo: GitHub - BGP Sandbox\nYour browser does not support the video tag. 4. How I used Claude Sonnet 4.5 and its features: I took full advantage of Sonnet 4.5, which may very well be the best coding model on the market right now, and a greenfield project where I could really let it cook without a lot of stop-checks for what changes are bieng made to the existing codebase. It moved fast from concept to raw MVP to a fully functional product that exceeded my goals.\n",
      "content_html": "\u003cblockquote\u003e\n\u003cp\u003eThis is my entry into a contest - building something cool in one week or less. I\u0026rsquo;ve wanted to explore the intersection of code and network engineering more so I geared this project toward BGP daemons.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"1-what-i-built\"\u003e1: What I built:\u003c/h3\u003e\n\u003cp\u003eThis project is an educational tool for Border Gateway Protocol. It helps users visualize BGP route advertisements between peers. It also allows the user to interact with the BGP process by: injecting routes into the BGP process and configuring import/export policies. Users can see how these policies and advertisements effect the Peer route tables in real time. It was important to me that the application use actual BGP routing instances that peer with each other.\u003c/p\u003e\n\u003cp\u003eThe user interacts with a custom TUI build for this project (because TUIs are cool) and after selecting their run configuration a GUI is launched with the specified daemon start-states. The TUI was built using the BubbleTea framework (GO). The frontend is built using JS/React/Cytoscape and the backend is leveraging GoBGP.\u003c/p\u003e\n\u003ch3 id=\"2-how-i-built-it-in-a-week-or-less\"\u003e2. How I built it in a week or less:\u003c/h3\u003e\n\u003cp\u003eI started this project on the evening of Friday October 3rd, with an idea that I\u0026rsquo;d been kicking around for quite some time. I finished with a functional product that exceeded my expectations on the Sunday evening (10/5). My initial prompt:\u003c/p\u003e\n\u003cblockquote\u003e\nBuild an educational BGP sandbox app consisting of:\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTUI - Use: \u003ca href=\"https://github.com/charmbracelet/bubbletea\"\u003ehttps://github.com/charmbracelet/bubbletea\u003c/a\u003e to create a TUI that launches the browser based frontend.\n-Colorful, with options to determine how many peers are included in the launch, whether they use iBGP or eBGP, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFrontend - Javascript:\nbrowser-based interactive UI.\n-Users see a small AS-level network w/nodes and edges.\n-Users can Toggle BGP neighborships on/off between AS nodes.\n-Inject prefixes from an AS.\n-Apply simple BGP policy knobs (local-pref, AS-path prepend, MED, community no-export).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe graph should update to show:\n-Best path selection (highlighted).\n-Alternate paths (dimmed).\n-Animated “packets” moving along the best path.\u003c/p\u003e\n\u003cp\u003eReact + Cytoscape.js or D3.\nREST or websocket connection to backend.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\n\u003cp\u003eBackend - GoBGP:\nRun GoBGP inside a Docker container as the routing engine.\n-A lightweight Node.js/Express service runs alongside GoBGP in the same container or compose setup.\n-This service exposes REST or WebSocket endpoints that the frontend can call. Use GoBGP documentation to determine functions to expose, such as:\nPOST /enable → enables a BGP session.\nPOST /disable → tears down a session.\nPOST /prefixes → inject a prefix into a given AS.\nPOST /policy → apply simple policy knobs.\nGET /routes → returns the RIB for best path info for visualization.\n-The service internally uses GoBGP’s gRPC API to perform these actions.\n-Fully document the API\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eContainerization - Docker:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eProvide a Dockerfile or docker-compose.yml that:\n-Runs GoBGP.\n-Runs the API service.\n-Exposes the frontend via a simple dev server (e.g., Vite/React).\u003c/p\u003e\n\u003cp\u003e*This should be fully functional, no mock data. If you have questions about deployment protocols or methods feel free to ask me before deployment.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSome additional prompts were used to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMake the TUI more decorative\u003c/li\u003e\n\u003cli\u003eChange the configuration to ensure each \u0026ldquo;Peer\u0026rdquo; is in fact its own instance of GoBGP, rather than a single instance.\u003c/li\u003e\n\u003cli\u003eMake sure the entire project can be spun up and down using docker.\u003c/li\u003e\n\u003cli\u003eAdd a clickable \u0026ldquo;packet\u0026rdquo; that looks like a condiment packet, which displays the NLRI being exchanged between Peers.\u003c/li\u003e\n\u003cli\u003eEnsure import/export policies are being properly applied and can be both created and deleted by the user.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-screenshotsdemo\"\u003e3. Screenshots/Demo:\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/heresoidontgetfined/bgp_sandbox\"\u003eGitHub - BGP Sandbox\u003c/a\u003e\u003c/p\u003e\n\n\n\u003cvideo controls width=\"100%\"\u003e\n  \u003csource src=\"/images/BGP_screencap.mp4\" type=\"video/mp4\"\u003e\n  Your browser does not support the video tag.\n\u003c/video\u003e\n\n\u003cdiv class=\"gallery\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 1rem 0;\"\u003e\n  \u003cimg\n  src=\"/images/bgp0.png\"\n  alt=\"img3\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\n\u003cimg\n  src=\"/images/bgp1.png\"\n  alt=\"img1\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\n\u003cimg\n  src=\"/images/bgp2.png\"\n  alt=\"img2\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\n\u003cimg\n  src=\"/images/bgp3.png\"\n  alt=\"img3\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\n\u003cimg\n  src=\"/images/bgp4.png\"\n  alt=\"img3\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"4-how-i-used-claude-sonnet-45-and-its-features\"\u003e4. How I used Claude Sonnet 4.5 and its features:\u003c/h3\u003e\n\u003cp\u003eI took full advantage of Sonnet 4.5, which may very well be the best coding model on the market right now, and a greenfield project where I could really let it cook without a lot of stop-checks for what changes are bieng made to the existing codebase. It moved fast from concept to raw MVP to a fully functional product that exceeded my goals.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/bgp_sandbox/",
      "date_published": "5106-05-09T1028:55:00-05:00",
      "date_modified": "5106-05-09T1028:55:00-05:00",
      "author": {
        "name": "Mike Foreman",
        "url": "http://localhost:1313/"
      }
    },
    
    {
      "id": "d59fcb31c93b9557ba72063e05e05ebc1ee47157",
      "title": "Flutter basics",
      "summary": "",
      "content_text": " Note: If you\u0026rsquo;ve worked with languages that are statically typed, null-safe, and allow for declaring variables (im)mutable then Dart should feel pretty readable to you. After having spent the last 15 years or so working in really \u0026ldquo;fast\u0026rdquo; scripting languages like Powershell and Python, it has taken me some getting used to:\nFinal \u0026lt;Dart\u0026gt; CanSeem (Very?\u0026lt;Verbose\u0026gt; atTimes)=\u0026gt; toMe; I recently had the opportunity to learn the basics of DartLang and the Flutter framework. Most guides are focused on the UI creation, or are focused on qualifying Dart structure/syntax with well known software engineering concepts. Not having any experience in any languages that feel similar to Dart, the latter wasn\u0026rsquo;t very helpful for me. There are two concepts I was missing when I started working on my app that I now think are most important to understand when starting out: State management and Class inheretence .\nState management This was a wholly new concept to me. Most of the code I\u0026rsquo;ve done up to this point takes data in at run time, performs functions, and reports or saves data as output. The most user interaction I\u0026rsquo;ve had to account for was a switch-style CLI menu. When I was researching Flutter builds I kept seeing State Management packages getting thrown around and realized it was a concept I\u0026rsquo;d have to tackle, but wasn\u0026rsquo;t exactly sure what aspects of my app would require it. If you\u0026rsquo;re a seasoned Mobile developer you\u0026rsquo;d have a gameplan for state management at scale before starting your build. If you are me, you start making those decisions at the moment you try to write your first widget. Every UI component in Flutter is a Widget, and every Widget inherits from one of two base classes: Stateless or Stateful.\nStateful vs Stateless widgets initially seems like a simple concept but can get tricky when you remember in Flutter you will at times be dealing with a series of idgets nested inside of widgets. Exactly which widget needs to be Stateful? The good news is in the simple app you\u0026rsquo;re making as a beginner, if you choose the wrong widget state you\u0026rsquo;ll be fine. If you incorrectly choose Stateful, your App will be a little less efficient at compile time, no biggie. You will know pretty quickly if you incorrectly chose Stateless, when you find yourself trying to configure the setState command and realize it\u0026rsquo;s not available. It\u0026rsquo;s simple enough to change the widget being extended and move your stateful logic to the the state class:\nclass SettingsPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold(); } } Becomes:\nclass SettingsPage extends StatefulWidget { @override _SettingsPageState createState() =\u0026gt; _SettingsPageState(); } class _SettingsPageState extends State\u0026lt;SettingsPage\u0026gt; { @override Widget build(BuildContext context) { return Scaffold(); } void _onItemTapped(int index) { setState(() { _selectedIndex = index; }); } } All of this was pretty overwhelming for me until I realized this is pretty boilerplate. You\u0026rsquo;ll see the same format over and over for Stateful widgets. You extend the class to create your widget, then you use the CreateState function, which is a method of the StatefulWidget class.\nWhen setState is called, it rebuilds the related widget (calls the widgets build method). This refreshes the widget so the UI accurately displays updated information. The example you\u0026rsquo;ll see thrown around a lot is a counter, when you click the button the counterVariable would be incremented. But the UI was already rendered. You need setState to call the re-build. If you have multiple widgets that share the same \u0026ldquo;stateful\u0026rdquo; information, that information should be stored in a parent widget that can call for a rebuild in the child widgets.\n\u0026#x1f4cc; I don\u0026rsquo;t recommend using state management repos until you have a firm grab on the basics of the built-in functionality. That being said, the official Flutter docs pretty quickly jump to using Provider, a 3rd party repo, in their Docs for examples. Make of that what you will.\nClass Inheritance You have to accept that everything is a widget. There\u0026rsquo;s only one rule: Null safety? No, not that. You can get around that(?). It is that you don\u0026rsquo;t ask WHY everything is a widget. Maybe it is because Widgets is people?\n\u0026ldquo;Widgets are used to describe all aspects of a user interface, including physical aspects such as text and buttons to lay out effects like padding and alignment.\u0026rdquo; - the Docs\nBut widgets really are objects being instantiated from a class. And those objects inherit from existing classes. It\u0026rsquo;s the foundation of Flutter. I\u0026rsquo;ve worked with classes a little in Python, but I have not found occasion to create a class that inherits from another. Flutter feels like you\u0026rsquo;re getting paid per inheritance. It\u0026rsquo;s filthy with it. Once you get on board with that, and method @overrides, the picture really starts to come together. I tend to enjoy \u0026ldquo;walking out\u0026rdquo; code to make sense of it, but when it comes to certain UI elements I\u0026rsquo;ve found its easier to just accept that a Scaffold is a widget, or an AppBar is a widget, and not feel the need to dig into their classes beyond the superficial. That being said, consider how you want to organize your code in terms of separate .dart files and private versus public methods and parameters, because \u0026ldquo;refactoring\u0026rdquo; this stuff later can be difficult with the object oriented nature of the widgets. It can be more complicated to unwind later than you\u0026rsquo;d think.\n",
      "content_html": "\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you\u0026rsquo;ve worked with languages that are statically typed, null-safe, and allow for declaring variables (im)mutable then Dart should feel pretty readable to you. After having spent the last 15 years or so working in really \u0026ldquo;fast\u0026rdquo; scripting languages like Powershell and Python, it has taken me some getting used to:\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-dart\" data-lang=\"dart\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003eFinal\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eDart\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eCanSeem\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eVery\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e?\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eVerbose\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eatTimes\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003etoMe\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr\u003e\n\u003cp\u003eI recently had the opportunity to learn the basics of DartLang and the Flutter framework. Most guides are focused on the UI creation, or are focused on qualifying Dart structure/syntax with well known software engineering concepts. Not having any experience in any languages that feel similar to Dart, the latter wasn\u0026rsquo;t very helpful for me. There are two concepts I was missing when I started working on my app that I now think are most important to understand when starting out: \u003cem\u003eState management\u003c/em\u003e and \u003cem\u003eClass inheretence\u003c/em\u003e .\u003c/p\u003e\n\u003ch3 id=\"state-management\"\u003eState management\u003c/h3\u003e\n\u003cp\u003eThis was a wholly new concept to me. Most of the code I\u0026rsquo;ve done up to this point takes data in at run time, performs functions, and reports or saves data as output. The most user interaction I\u0026rsquo;ve had to account for was a switch-style CLI menu. When I was researching Flutter builds I kept seeing State Management packages getting thrown around and realized it was a concept I\u0026rsquo;d have to tackle, but wasn\u0026rsquo;t exactly sure what aspects of my app would require it. If you\u0026rsquo;re a seasoned Mobile developer you\u0026rsquo;d have a gameplan for state management at scale before starting your build. If you are me, you start making those decisions at the moment you try to write your first widget. Every UI component in Flutter is a Widget, and every Widget inherits from one of two base classes: \u003cstrong\u003eStateless\u003c/strong\u003e or \u003cstrong\u003eStateful\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eStateful vs Stateless widgets initially seems like a simple concept but can get tricky when you remember in Flutter you will at times be dealing with a series of idgets nested inside of widgets. Exactly \u003cem\u003ewhich\u003c/em\u003e widget needs to be Stateful? The good news is in the simple app you\u0026rsquo;re making as a beginner, if you choose the wrong widget state you\u0026rsquo;ll be fine. If you incorrectly choose Stateful, your App will be a little less efficient at compile time, no biggie. You will know pretty quickly if you incorrectly chose Stateless, when you find yourself trying to configure the \u003ca href=\"https://api.flutter.dev/flutter/widgets/State/setState.html\"\u003esetState\u003c/a\u003e command and realize it\u0026rsquo;s not available. It\u0026rsquo;s simple enough to change the widget being extended and move your stateful logic to the the state class:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eSettingsPage\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eextends\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eStatelessWidget\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75af00\"\u003e@override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eWidget\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003ebuild\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eBuildContext\u003c/span\u003e \u003cspan style=\"color:#111\"\u003econtext\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eScaffold\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBecomes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003eSettingsPage\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eextends\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eStatefulWidget\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75af00\"\u003e@override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003e_SettingsPageState\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003ecreateState\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e_SettingsPageState\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003e_SettingsPageState\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eextends\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eState\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eSettingsPage\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75af00\"\u003e@override\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eWidget\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003ebuild\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eBuildContext\u003c/span\u003e \u003cspan style=\"color:#111\"\u003econtext\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eScaffold\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003e_onItemTapped\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eindex\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003esetState\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(()\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#111\"\u003e_selectedIndex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eindex\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAll of this was pretty overwhelming for me until I realized this is pretty boilerplate. You\u0026rsquo;ll see the same format over and over for Stateful widgets. You extend the class to create your widget, then you use the \u003ca href=\"https://api.flutter.dev/flutter/widgets/StatefulWidget/createState.html\"\u003eCreateState\u003c/a\u003e function, which is a method of the StatefulWidget class.\u003c/p\u003e\n\u003cp\u003eWhen setState is called, it rebuilds the related widget (calls the widgets \u003ca href=\"https://api.flutter.dev/flutter/widgets/Builder-class.html\"\u003ebuild\u003c/a\u003e method). This refreshes the widget so the UI accurately displays updated information. The example you\u0026rsquo;ll see thrown around a lot is a counter, when you click the button the counterVariable would be incremented. But the UI was already rendered. You need setState to call the re-build. If you have multiple widgets that share the same \u0026ldquo;stateful\u0026rdquo; information, that information should be stored in a parent widget that can call for a rebuild in the child widgets.\u003c/p\u003e\n\u003cp\u003e\u0026#x1f4cc; I don\u0026rsquo;t recommend using state management repos until you have a firm grab on the basics of the built-in functionality. That being said, the official Flutter docs pretty quickly jump to using \u003ca href=\"https://pub.dev/packages/provider\"\u003eProvider\u003c/a\u003e, a 3rd party repo, in their Docs for examples. Make of that what you will.\u003c/p\u003e\n\u003ch3 id=\"class-inheritance\"\u003eClass Inheritance\u003c/h3\u003e\n\u003cp\u003eYou have to accept that everything is a widget. There\u0026rsquo;s only one rule: \u003cem\u003eNull safety?\u003c/em\u003e No, not that. You can get around that(?). It is that you don\u0026rsquo;t ask WHY everything is a widget. Maybe it is because \u003ca href=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_FcKfLJKGexhRSAJ5KExBj_3OLMisT22rsrtEtMMKglMaGsQu\"\u003eWidgets is people?\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Widgets are used to describe all aspects of a user interface, including physical aspects such as text and buttons to lay out effects like padding and alignment.\u0026rdquo; - \u003ca href=\"https://docs.flutter.dev/get-started/fundamentals/widgets\"\u003ethe Docs\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eBut widgets really are objects being instantiated from a class. And those objects inherit from existing classes. It\u0026rsquo;s the foundation of Flutter. I\u0026rsquo;ve worked with classes a little in Python, but I have not found occasion to create a class that inherits from another. Flutter feels like you\u0026rsquo;re getting paid per inheritance. It\u0026rsquo;s filthy with it. Once you get on board with that, and method @overrides, the picture really starts to come together. I tend to enjoy \u0026ldquo;walking out\u0026rdquo; code to make sense of it, but when it comes to certain UI elements I\u0026rsquo;ve found its easier to just accept that a Scaffold is a widget, or an AppBar is a widget, and not feel the need to dig into their classes beyond the superficial. That being said, consider how you want to organize your code in terms of separate .dart files and private versus public methods and parameters, because \u0026ldquo;refactoring\u0026rdquo; this stuff later can be difficult with the object oriented nature of the widgets. It can be more complicated to unwind later than you\u0026rsquo;d think.\u003c/p\u003e\n",
      "url": "http://localhost:1313/posts/flutter_basics/",
      "date_published": "4036-04-09T35:44:00-06:00",
      "date_modified": "4036-04-09T35:44:00-06:00",
      "author": {
        "name": "Mike Foreman",
        "url": "http://localhost:1313/"
      }
    }
    
  ]
}